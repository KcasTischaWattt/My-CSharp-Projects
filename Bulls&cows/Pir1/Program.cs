using System;

namespace Pir1
{
    class Program
    {
        // Вся программа основана на работе со строками. Там, где в комментариях написано "число" - часто подразумевается "строка". Но это сделано для упрощенного понимания кода
        static void Main(string[] args)
        {
            ConsoleKeyInfo keyInfo;
            do
            {
                // Переменная, отвечающая за длину слова
                int length;
                do
                {
                    Console.WriteLine("Введите длину загадываемого числа (от 1 до 10):");
                    // Цикл while, пока пользователь не введет корректную длину загадываемого числа
                } while (!int.TryParse(Console.ReadLine(), out length) || length < 1 || length > 10);
                // Генерируем число заданой длины (см. метод GenerateNumber) 
                string sNumber = GenerateNumber(length);
                Console.WriteLine("Число загадано. Отгадайте!");
                // !Можете раскомментировать следующую строчку для проверки!
                // Console.WriteLine(sNumber);
                // Переменная, равная введенной пользователем отгадке
                string guess;
                // основная логика игры, подсчет быков и коров в пользовательском вводе вплоть до полного угадывания числа
                do
                {
                    // Обнуляем счетчики коров и быков, чтобы вывести их количество для нового введенного числа числа
                    int cows = 0;
                    int bulls = 0;
                    // Проверка пользовательского ввода (см. метод GetUserNumber)
                    guess = GetUserNumber(length);
                    // Цикл for, считающий быков и коров путем поиска каждого символа введенного пользователем числа в загаданном числе
                    for (int i = 0; i < length; i++)
                    {
                        // Переменная, равная позиции в загаданном числе i- ого символа введенного пользователем числа
                        int positionInNumber = sNumber.IndexOf(guess[i]);
                        // Если одинаковые цифры стоят на одинаковых местах в обоих числах - то мы "нашли быка"
                        if (positionInNumber == i)
                        {
                            bulls++;
                        }
                        // Если мы просто нашли одинаковые цифры в обоих числах (но не на одинаковых местах) - то "корова"
                        else if (positionInNumber != -1)
                        {
                            cows++;
                        }
                    }
                    // Вывод количества коров и быков
                    Console.WriteLine($"Коров: {cows}, быков: {bulls}");
                } while (guess != sNumber);
                Console.WriteLine("Ура, вы угадали! Для выхода нажмите Esc, для продолжения - любую другую клавишу");
                // Повтор программы
                keyInfo = Console.ReadKey(true);
            } while (keyInfo.Key != ConsoleKey.Escape);


        }

        // Генерация случайного числа с неповторяющимися цифрами заданной длины length
        public static string GenerateNumber(int length)
        {
            // Задаем строку, из которой будут браться уникальные цифры для числа
            string digits = "1234567890";
            // Задаем строку, в которой будет храниться результат генерации(это и будет наше число)
            string result = "";
            // Подключваем генератор случайных чисел
            var myGenerator = new Random();
            // Непосредственно сама генерация числа длины length
            // Метод генерации: генерируется число, отвечающее за номер элемента в строке digits, откуда берется элемент с этим номером,
            // прибавляется к строке result и удаляется из строки, чтобы все цифры числа были были уникальными
            for (int i = 0; i < length; i++)
            {
                // Переменная, отвечающая за позицию(номер) элемента в строке digit
                int digitPosition;
                // На первом проходе цикла нам надо исключить ноль(число не может начинаться с нуля). Так как его позиция в строке -
                // девятая(индексация начинается с нуля), то генерируем число от 0 до 8(включительно)
                if (i == 0)
                {
                    // Генерация числа от 0 до 8 включительно
                    digitPosition = myGenerator.Next() % 9;
                }
                // На других проходах цикла может быть ноль. Но так как строка с каждым проходом сокращается из-за удаления уже использованной
                // в числе цифры, то и сгенерированное число должна быть от нуля до количества элементов строке (digits.Length)
                else
                {
                    // Генерация раннее описанного числа
                    digitPosition = myGenerator.Next() % digits.Length;
                }
                // Добавляем к числу цифру из строки digits с раннее сгенерированным индексом digitPosition 
                result += digits[digitPosition];
                // Удаляем эту цифру из строки ditits
                digits = digits.Remove(digitPosition, 1);
            }
            return result;
        }

        // Проверка введенного пользователем числа на уникальность цифр для метода GetUserNumber(Проверка пользовательского ввода)
        public static bool AreDigitsUnique(string sNumber)
        {
            // Принцип работы: проходимся по числу, и сравниваем каждую его цифру со следующими цифрами в этом числе
            // Внешний цикл отвечает за цифру, которая будет сравниваться с остальными
            // Внутренний - за цифры, с которыми будет сравниваться выбранная во внешнем цикле цифра
            for (int i = 0; i < sNumber.Length; i++)
            {
                for (int j = i + 1; j < sNumber.Length; j++)
                {
                    // Если нашли одинакове цифры - введенное пользователем число неверно
                    if (sNumber[i] == sNumber[j])
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        // Пользовательский ввод и его проверка
        public static string GetUserNumber(int length)
        {
            // Число, которое должно получиться в результате работы этого метода - это и есть число, введенное пользователем, прошедшее все проверки
            string guess = "";
            do
            {
                Console.WriteLine("Введите вашу догадку:");
                // Ввод догадки
                string input = Console.ReadLine();
                // Удаление всех незначащих нулей в начале строки и всех пробело в начале и конце(но не внутри самой) введенной строки
                input = input.Trim().TrimStart('0');
                // Проверка на то, является ли введенная строка неотрицательным числом
                if (!ulong.TryParse(input, out ulong inputInt))
                {
                    Console.WriteLine("Это должно быть число, причем неотрицательное");
                }
                // Проверка на совпадение длины загаданного и введенного пользователем числа
                else if (input.Length != length)
                {
                    Console.WriteLine($"Это должно быть {length}-значное число");
                }
                // Проверка на уникальность цифр в числе(см. AreDigitsUnique)
                else if (!AreDigitsUnique(input))
                {
                    Console.WriteLine("Цифры не должны повторяться");
                }
                // Если все проверки пройдены - введенное число пользователем записывается в guess, и цикл завершается
                else
                {
                    guess = input;
                }
            } while (guess.Length == 0);
            return guess;
        }


    }
}
